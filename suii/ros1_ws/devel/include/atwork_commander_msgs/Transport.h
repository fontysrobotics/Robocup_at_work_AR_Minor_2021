// Generated by gencpp from file atwork_commander_msgs/Transport.msg
// DO NOT EDIT!


#ifndef ATWORK_COMMANDER_MSGS_MESSAGE_TRANSPORT_H
#define ATWORK_COMMANDER_MSGS_MESSAGE_TRANSPORT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <atwork_commander_msgs/Object.h>

namespace atwork_commander_msgs
{
template <class ContainerAllocator>
struct Transport_
{
  typedef Transport_<ContainerAllocator> Type;

  Transport_()
    : object()
    , source()
    , destination()  {
    }
  Transport_(const ContainerAllocator& _alloc)
    : object(_alloc)
    , source(_alloc)
    , destination(_alloc)  {
  (void)_alloc;
    }



   typedef  ::atwork_commander_msgs::Object_<ContainerAllocator>  _object_type;
  _object_type object;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _source_type;
  _source_type source;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _destination_type;
  _destination_type destination;





  typedef boost::shared_ptr< ::atwork_commander_msgs::Transport_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::atwork_commander_msgs::Transport_<ContainerAllocator> const> ConstPtr;

}; // struct Transport_

typedef ::atwork_commander_msgs::Transport_<std::allocator<void> > Transport;

typedef boost::shared_ptr< ::atwork_commander_msgs::Transport > TransportPtr;
typedef boost::shared_ptr< ::atwork_commander_msgs::Transport const> TransportConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::atwork_commander_msgs::Transport_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::atwork_commander_msgs::Transport_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::atwork_commander_msgs::Transport_<ContainerAllocator1> & lhs, const ::atwork_commander_msgs::Transport_<ContainerAllocator2> & rhs)
{
  return lhs.object == rhs.object &&
    lhs.source == rhs.source &&
    lhs.destination == rhs.destination;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::atwork_commander_msgs::Transport_<ContainerAllocator1> & lhs, const ::atwork_commander_msgs::Transport_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace atwork_commander_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::atwork_commander_msgs::Transport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::atwork_commander_msgs::Transport_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::atwork_commander_msgs::Transport_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::atwork_commander_msgs::Transport_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::atwork_commander_msgs::Transport_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::atwork_commander_msgs::Transport_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::atwork_commander_msgs::Transport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8105e7cba30e822d7c08bd538069c0ba";
  }

  static const char* value(const ::atwork_commander_msgs::Transport_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8105e7cba30e822dULL;
  static const uint64_t static_value2 = 0x7c08bd538069c0baULL;
};

template<class ContainerAllocator>
struct DataType< ::atwork_commander_msgs::Transport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "atwork_commander_msgs/Transport";
  }

  static const char* value(const ::atwork_commander_msgs::Transport_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::atwork_commander_msgs::Transport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Object object\n"
"string source\n"
"string destination\n"
"\n"
"================================================================================\n"
"MSG: atwork_commander_msgs/Object\n"
"# Object.msg\n"
"\n"
"uint16 object\n"
"uint16 target\n"
"bool   decoy\n"
"\n"
"uint16 EMPTY = 0\n"
"\n"
"# atwork\n"
"uint16 ATWORK_START = 11\n"
"uint16 F20_20_B = 11\n"
"uint16 F20_20_G = 12\n"
"uint16 S40_40_B = 13\n"
"uint16 S40_40_G = 14\n"
"uint16 M20_100 = 15\n"
"uint16 M20 = 16\n"
"uint16 M30 = 17\n"
"uint16 R20 = 18\n"
"uint16 ATWORK_END = 19\n"
"\n"
"# rockin\n"
"uint16 ROCKIN_START = 21\n"
"uint16 BEARING_BOX = 21\n"
"uint16 BEARING = 22\n"
"uint16 AXIS = 23\n"
"uint16 DISTANCE_TUBE = 24\n"
"uint16 MOTOR = 25\n"
"uint16 ROCKIN_END = 26\n"
"\n"
"# container\n"
"uint16 CONTAINER_START = 31\n"
"uint16 CONTAINER_RED = 31\n"
"uint16 CONTAINER_BLUE = 32\n"
"uint16 CONTAINER_END = 33\n"
"\n"
"# cavity\n"
"uint16 CAVITY_START = 41\n"
"uint16 F20_20_H  = 41\n"
"uint16 F20_20_V  = 42\n"
"uint16 F20_20_F  = 43\n"
"uint16 S40_40_H  = 44\n"
"uint16 S40_40_V  = 45\n"
"uint16 S40_40_F  = 46\n"
"uint16 M20_H     = 47\n"
"uint16 M20_V     = 48\n"
"uint16 M20_F     = 49\n"
"uint16 M20_100_H = 50\n"
"uint16 M20_100_V = 51\n"
"uint16 M20_100_F = 52\n"
"uint16 M30_H     = 53\n"
"uint16 M30_V     = 54\n"
"uint16 M30_F     = 55\n"
"uint16 R20_H     = 56\n"
"uint16 R20_V     = 57\n"
"uint16 R20_F     = 58\n"
"uint16 CAVITY_END = 59\n"
;
  }

  static const char* value(const ::atwork_commander_msgs::Transport_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::atwork_commander_msgs::Transport_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.object);
      stream.next(m.source);
      stream.next(m.destination);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Transport_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::atwork_commander_msgs::Transport_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::atwork_commander_msgs::Transport_<ContainerAllocator>& v)
  {
    s << indent << "object: ";
    s << std::endl;
    Printer< ::atwork_commander_msgs::Object_<ContainerAllocator> >::stream(s, indent + "  ", v.object);
    s << indent << "source: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.source);
    s << indent << "destination: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.destination);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ATWORK_COMMANDER_MSGS_MESSAGE_TRANSPORT_H
