// Generated by gencpp from file atwork_commander_msgs/StartTaskRequest.msg
// DO NOT EDIT!


#ifndef ATWORK_COMMANDER_MSGS_MESSAGE_STARTTASKREQUEST_H
#define ATWORK_COMMANDER_MSGS_MESSAGE_STARTTASKREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <atwork_commander_msgs/RobotHeader.h>

namespace atwork_commander_msgs
{
template <class ContainerAllocator>
struct StartTaskRequest_
{
  typedef StartTaskRequest_<ContainerAllocator> Type;

  StartTaskRequest_()
    : robots()  {
    }
  StartTaskRequest_(const ContainerAllocator& _alloc)
    : robots(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::atwork_commander_msgs::RobotHeader_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::atwork_commander_msgs::RobotHeader_<ContainerAllocator> >::other >  _robots_type;
  _robots_type robots;





  typedef boost::shared_ptr< ::atwork_commander_msgs::StartTaskRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::atwork_commander_msgs::StartTaskRequest_<ContainerAllocator> const> ConstPtr;

}; // struct StartTaskRequest_

typedef ::atwork_commander_msgs::StartTaskRequest_<std::allocator<void> > StartTaskRequest;

typedef boost::shared_ptr< ::atwork_commander_msgs::StartTaskRequest > StartTaskRequestPtr;
typedef boost::shared_ptr< ::atwork_commander_msgs::StartTaskRequest const> StartTaskRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::atwork_commander_msgs::StartTaskRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::atwork_commander_msgs::StartTaskRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::atwork_commander_msgs::StartTaskRequest_<ContainerAllocator1> & lhs, const ::atwork_commander_msgs::StartTaskRequest_<ContainerAllocator2> & rhs)
{
  return lhs.robots == rhs.robots;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::atwork_commander_msgs::StartTaskRequest_<ContainerAllocator1> & lhs, const ::atwork_commander_msgs::StartTaskRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace atwork_commander_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::atwork_commander_msgs::StartTaskRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::atwork_commander_msgs::StartTaskRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::atwork_commander_msgs::StartTaskRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::atwork_commander_msgs::StartTaskRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::atwork_commander_msgs::StartTaskRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::atwork_commander_msgs::StartTaskRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::atwork_commander_msgs::StartTaskRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f62505f635604fff4a31fc454703225a";
  }

  static const char* value(const ::atwork_commander_msgs::StartTaskRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf62505f635604fffULL;
  static const uint64_t static_value2 = 0x4a31fc454703225aULL;
};

template<class ContainerAllocator>
struct DataType< ::atwork_commander_msgs::StartTaskRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "atwork_commander_msgs/StartTaskRequest";
  }

  static const char* value(const ::atwork_commander_msgs::StartTaskRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::atwork_commander_msgs::StartTaskRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RobotHeader[] robots\n"
"\n"
"================================================================================\n"
"MSG: atwork_commander_msgs/RobotHeader\n"
"# RobotHeader.msg\n"
"\n"
"Header header\n"
"string team_name\n"
"string robot_name\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::atwork_commander_msgs::StartTaskRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::atwork_commander_msgs::StartTaskRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robots);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StartTaskRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::atwork_commander_msgs::StartTaskRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::atwork_commander_msgs::StartTaskRequest_<ContainerAllocator>& v)
  {
    s << indent << "robots[]" << std::endl;
    for (size_t i = 0; i < v.robots.size(); ++i)
    {
      s << indent << "  robots[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::atwork_commander_msgs::RobotHeader_<ContainerAllocator> >::stream(s, indent + "    ", v.robots[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ATWORK_COMMANDER_MSGS_MESSAGE_STARTTASKREQUEST_H
