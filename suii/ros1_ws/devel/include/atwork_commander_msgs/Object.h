// Generated by gencpp from file atwork_commander_msgs/Object.msg
// DO NOT EDIT!


#ifndef ATWORK_COMMANDER_MSGS_MESSAGE_OBJECT_H
#define ATWORK_COMMANDER_MSGS_MESSAGE_OBJECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace atwork_commander_msgs
{
template <class ContainerAllocator>
struct Object_
{
  typedef Object_<ContainerAllocator> Type;

  Object_()
    : object(0)
    , target(0)
    , decoy(false)  {
    }
  Object_(const ContainerAllocator& _alloc)
    : object(0)
    , target(0)
    , decoy(false)  {
  (void)_alloc;
    }



   typedef uint16_t _object_type;
  _object_type object;

   typedef uint16_t _target_type;
  _target_type target;

   typedef uint8_t _decoy_type;
  _decoy_type decoy;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(EMPTY)
  #undef EMPTY
#endif
#if defined(_WIN32) && defined(ATWORK_START)
  #undef ATWORK_START
#endif
#if defined(_WIN32) && defined(F20_20_B)
  #undef F20_20_B
#endif
#if defined(_WIN32) && defined(F20_20_G)
  #undef F20_20_G
#endif
#if defined(_WIN32) && defined(S40_40_B)
  #undef S40_40_B
#endif
#if defined(_WIN32) && defined(S40_40_G)
  #undef S40_40_G
#endif
#if defined(_WIN32) && defined(M20_100)
  #undef M20_100
#endif
#if defined(_WIN32) && defined(M20)
  #undef M20
#endif
#if defined(_WIN32) && defined(M30)
  #undef M30
#endif
#if defined(_WIN32) && defined(R20)
  #undef R20
#endif
#if defined(_WIN32) && defined(ATWORK_END)
  #undef ATWORK_END
#endif
#if defined(_WIN32) && defined(ROCKIN_START)
  #undef ROCKIN_START
#endif
#if defined(_WIN32) && defined(BEARING_BOX)
  #undef BEARING_BOX
#endif
#if defined(_WIN32) && defined(BEARING)
  #undef BEARING
#endif
#if defined(_WIN32) && defined(AXIS)
  #undef AXIS
#endif
#if defined(_WIN32) && defined(DISTANCE_TUBE)
  #undef DISTANCE_TUBE
#endif
#if defined(_WIN32) && defined(MOTOR)
  #undef MOTOR
#endif
#if defined(_WIN32) && defined(ROCKIN_END)
  #undef ROCKIN_END
#endif
#if defined(_WIN32) && defined(CONTAINER_START)
  #undef CONTAINER_START
#endif
#if defined(_WIN32) && defined(CONTAINER_RED)
  #undef CONTAINER_RED
#endif
#if defined(_WIN32) && defined(CONTAINER_BLUE)
  #undef CONTAINER_BLUE
#endif
#if defined(_WIN32) && defined(CONTAINER_END)
  #undef CONTAINER_END
#endif
#if defined(_WIN32) && defined(CAVITY_START)
  #undef CAVITY_START
#endif
#if defined(_WIN32) && defined(F20_20_H)
  #undef F20_20_H
#endif
#if defined(_WIN32) && defined(F20_20_V)
  #undef F20_20_V
#endif
#if defined(_WIN32) && defined(F20_20_F)
  #undef F20_20_F
#endif
#if defined(_WIN32) && defined(S40_40_H)
  #undef S40_40_H
#endif
#if defined(_WIN32) && defined(S40_40_V)
  #undef S40_40_V
#endif
#if defined(_WIN32) && defined(S40_40_F)
  #undef S40_40_F
#endif
#if defined(_WIN32) && defined(M20_H)
  #undef M20_H
#endif
#if defined(_WIN32) && defined(M20_V)
  #undef M20_V
#endif
#if defined(_WIN32) && defined(M20_F)
  #undef M20_F
#endif
#if defined(_WIN32) && defined(M20_100_H)
  #undef M20_100_H
#endif
#if defined(_WIN32) && defined(M20_100_V)
  #undef M20_100_V
#endif
#if defined(_WIN32) && defined(M20_100_F)
  #undef M20_100_F
#endif
#if defined(_WIN32) && defined(M30_H)
  #undef M30_H
#endif
#if defined(_WIN32) && defined(M30_V)
  #undef M30_V
#endif
#if defined(_WIN32) && defined(M30_F)
  #undef M30_F
#endif
#if defined(_WIN32) && defined(R20_H)
  #undef R20_H
#endif
#if defined(_WIN32) && defined(R20_V)
  #undef R20_V
#endif
#if defined(_WIN32) && defined(R20_F)
  #undef R20_F
#endif
#if defined(_WIN32) && defined(CAVITY_END)
  #undef CAVITY_END
#endif

  enum {
    EMPTY = 0u,
    ATWORK_START = 11u,
    F20_20_B = 11u,
    F20_20_G = 12u,
    S40_40_B = 13u,
    S40_40_G = 14u,
    M20_100 = 15u,
    M20 = 16u,
    M30 = 17u,
    R20 = 18u,
    ATWORK_END = 19u,
    ROCKIN_START = 21u,
    BEARING_BOX = 21u,
    BEARING = 22u,
    AXIS = 23u,
    DISTANCE_TUBE = 24u,
    MOTOR = 25u,
    ROCKIN_END = 26u,
    CONTAINER_START = 31u,
    CONTAINER_RED = 31u,
    CONTAINER_BLUE = 32u,
    CONTAINER_END = 33u,
    CAVITY_START = 41u,
    F20_20_H = 41u,
    F20_20_V = 42u,
    F20_20_F = 43u,
    S40_40_H = 44u,
    S40_40_V = 45u,
    S40_40_F = 46u,
    M20_H = 47u,
    M20_V = 48u,
    M20_F = 49u,
    M20_100_H = 50u,
    M20_100_V = 51u,
    M20_100_F = 52u,
    M30_H = 53u,
    M30_V = 54u,
    M30_F = 55u,
    R20_H = 56u,
    R20_V = 57u,
    R20_F = 58u,
    CAVITY_END = 59u,
  };


  typedef boost::shared_ptr< ::atwork_commander_msgs::Object_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::atwork_commander_msgs::Object_<ContainerAllocator> const> ConstPtr;

}; // struct Object_

typedef ::atwork_commander_msgs::Object_<std::allocator<void> > Object;

typedef boost::shared_ptr< ::atwork_commander_msgs::Object > ObjectPtr;
typedef boost::shared_ptr< ::atwork_commander_msgs::Object const> ObjectConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::atwork_commander_msgs::Object_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::atwork_commander_msgs::Object_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::atwork_commander_msgs::Object_<ContainerAllocator1> & lhs, const ::atwork_commander_msgs::Object_<ContainerAllocator2> & rhs)
{
  return lhs.object == rhs.object &&
    lhs.target == rhs.target &&
    lhs.decoy == rhs.decoy;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::atwork_commander_msgs::Object_<ContainerAllocator1> & lhs, const ::atwork_commander_msgs::Object_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace atwork_commander_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::atwork_commander_msgs::Object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::atwork_commander_msgs::Object_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::atwork_commander_msgs::Object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::atwork_commander_msgs::Object_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::atwork_commander_msgs::Object_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::atwork_commander_msgs::Object_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::atwork_commander_msgs::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3ffc2473afeb55517725b66d59f15dbb";
  }

  static const char* value(const ::atwork_commander_msgs::Object_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3ffc2473afeb5551ULL;
  static const uint64_t static_value2 = 0x7725b66d59f15dbbULL;
};

template<class ContainerAllocator>
struct DataType< ::atwork_commander_msgs::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "atwork_commander_msgs/Object";
  }

  static const char* value(const ::atwork_commander_msgs::Object_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::atwork_commander_msgs::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Object.msg\n"
"\n"
"uint16 object\n"
"uint16 target\n"
"bool   decoy\n"
"\n"
"uint16 EMPTY = 0\n"
"\n"
"# atwork\n"
"uint16 ATWORK_START = 11\n"
"uint16 F20_20_B = 11\n"
"uint16 F20_20_G = 12\n"
"uint16 S40_40_B = 13\n"
"uint16 S40_40_G = 14\n"
"uint16 M20_100 = 15\n"
"uint16 M20 = 16\n"
"uint16 M30 = 17\n"
"uint16 R20 = 18\n"
"uint16 ATWORK_END = 19\n"
"\n"
"# rockin\n"
"uint16 ROCKIN_START = 21\n"
"uint16 BEARING_BOX = 21\n"
"uint16 BEARING = 22\n"
"uint16 AXIS = 23\n"
"uint16 DISTANCE_TUBE = 24\n"
"uint16 MOTOR = 25\n"
"uint16 ROCKIN_END = 26\n"
"\n"
"# container\n"
"uint16 CONTAINER_START = 31\n"
"uint16 CONTAINER_RED = 31\n"
"uint16 CONTAINER_BLUE = 32\n"
"uint16 CONTAINER_END = 33\n"
"\n"
"# cavity\n"
"uint16 CAVITY_START = 41\n"
"uint16 F20_20_H  = 41\n"
"uint16 F20_20_V  = 42\n"
"uint16 F20_20_F  = 43\n"
"uint16 S40_40_H  = 44\n"
"uint16 S40_40_V  = 45\n"
"uint16 S40_40_F  = 46\n"
"uint16 M20_H     = 47\n"
"uint16 M20_V     = 48\n"
"uint16 M20_F     = 49\n"
"uint16 M20_100_H = 50\n"
"uint16 M20_100_V = 51\n"
"uint16 M20_100_F = 52\n"
"uint16 M30_H     = 53\n"
"uint16 M30_V     = 54\n"
"uint16 M30_F     = 55\n"
"uint16 R20_H     = 56\n"
"uint16 R20_V     = 57\n"
"uint16 R20_F     = 58\n"
"uint16 CAVITY_END = 59\n"
;
  }

  static const char* value(const ::atwork_commander_msgs::Object_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::atwork_commander_msgs::Object_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.object);
      stream.next(m.target);
      stream.next(m.decoy);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Object_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::atwork_commander_msgs::Object_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::atwork_commander_msgs::Object_<ContainerAllocator>& v)
  {
    s << indent << "object: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.object);
    s << indent << "target: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.target);
    s << indent << "decoy: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.decoy);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ATWORK_COMMANDER_MSGS_MESSAGE_OBJECT_H
